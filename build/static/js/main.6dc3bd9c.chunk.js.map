{"version":3,"sources":["Components/Form.jsx","Utils/utils.js","Components/ListItem.jsx","Components/List.jsx","Containers/App.jsx","serviceWorker.js","index.js"],"names":["Form","handlerSubmit","inputRef","className","onSubmit","ref","type","placeholder","addZero","num","String","converter","Math","floor","tracker","startTime","currentTime","pauseTime","diffMilliseconds","diffSeconds","diffMinutes","diffHours","hours","minutes","seconds","milliseconds","ListItem","items","handlerPause","handlerDelete","map","id","title","pause","key","onClick","List","App","state","React","createRef","updateStates","setInterval","tick","setPauseTime","setLocalStorage","getLocalStorage","returnLocalStorage","JSON","parse","localStorage","getItem","setState","setItem","stringify","addItem","Date","getTime","current","value","trim","toLocaleTimeString","filter","item","length","e","preventDefault","this","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6dc3bd9c.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Form = ({ handlerSubmit, inputRef }) => {\n    return (\n        <form className=\"form\" onSubmit={handlerSubmit}>\n            <div className=\"form__row\">\n                <input ref={inputRef} type=\"text\" className=\"form__input\" placeholder=\"Enter tracker name\" />\n                <button type=\"submit\" className=\"form__submit\" />\n            </div>\n        </form>\n    );\n};\n\nForm.propTypes = {\n    handlerSubmit: PropTypes.func.isRequired,\n    inputRef: PropTypes.shape({ current: PropTypes.instanceOf(Element) }),\n};\n\nexport default Form;\n","export const addZero = num => {\n    if (num < 0) {\n        return \"00\";\n    } else if (num <= 9) {\n        return String(`0${num}`);\n    } else {\n        return String(num);\n    }\n};\n\nconst converter = num => {\n    if (num >= 60) {\n        return num - Math.floor(num / 60) * 60;\n    }\n    return num;\n};\n\nexport const tracker = (startTime, currentTime, pauseTime) => {\n    let diffMilliseconds = currentTime - startTime;\n    let diffSeconds = Math.floor(diffMilliseconds / 1000 - pauseTime);\n    let diffMinutes = Math.floor(diffSeconds / 60);\n    let diffHours = Math.floor(diffSeconds / 3600);\n\n    return {\n        hours: String(diffHours),\n        minutes: String(converter(diffMinutes)),\n        seconds: String(converter(diffSeconds)),\n        milliseconds: String(diffMilliseconds),\n    };\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { addZero } from \"../Utils/utils\";\n\nconst ListItem = ({ items, handlerPause, handlerDelete }) => {\n    return (\n        <>\n            {items.map(({ id, title, hours, minutes, seconds, pause }) => {\n                return (\n                    <li key={id} className={`list__item ${!pause ? \"active\" : \"\"}`}>\n                        <div title={title} className=\"list__title\">\n                            {title}\n                        </div>\n                        <div className=\"list__time\">\n                            {addZero(hours)}:{addZero(minutes)}:{addZero(seconds)}\n                        </div>\n                        <div className=\"list__buttons\">\n                            <button\n                                className={`list__btn ${!pause ? \"pause\" : \"play\"}`}\n                                onClick={() => handlerPause(id)}\n                            />\n                            <button className=\"list__btn delete\" onClick={() => handlerDelete(id)} />\n                        </div>\n                    </li>\n                );\n            })}\n        </>\n    );\n};\n\nListItem.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string.isRequired,\n            hours: PropTypes.string.isRequired,\n            minutes: PropTypes.string.isRequired,\n            seconds: PropTypes.string.isRequired,\n            pause: PropTypes.bool.isRequired,\n        }),\n    ),\n    handlerPause: PropTypes.func.isRequired,\n    handlerDelete: PropTypes.func.isRequired,\n};\n\nexport default ListItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ListItem from \"./ListItem\";\n\nconst List = ({ items, handlerPause, handlerDelete }) => {\n    return (\n        <ul className=\"list\">\n            <ListItem items={items} handlerPause={handlerPause} handlerDelete={handlerDelete} />\n        </ul>\n    );\n};\n\nList.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string.isRequired,\n            hours: PropTypes.string.isRequired,\n            minutes: PropTypes.string.isRequired,\n            seconds: PropTypes.string.isRequired,\n            pause: PropTypes.bool.isRequired,\n        }),\n    ),\n    handlerPause: PropTypes.func.isRequired,\n    handlerDelete: PropTypes.func.isRequired,\n};\n\nexport default List;\n","import React, { Component } from \"react\";\nimport Form from \"../Components/Form\";\nimport List from \"../Components/List\";\nimport { tracker } from \"../Utils/utils\";\n\nclass App extends Component {\n    state = {\n        items: [],\n    };\n\n    inputRef = React.createRef();\n\n    componentDidMount() {\n        if (localStorage.getItem(\"localStore\")) {\n            this.getLocalStorage();\n        }\n        this.updateStates();\n    }\n\n    updateStates = () => {\n        setInterval(this.tick, 1000);\n        setInterval(this.setPauseTime, 1000);\n        setInterval(this.setLocalStorage, 1000);\n    };\n\n    getLocalStorage = () => {\n        const returnLocalStorage = JSON.parse(localStorage.getItem(\"localStore\"));\n        this.setState({\n            items: returnLocalStorage.items,\n        });\n    };\n\n    setLocalStorage = () => {\n        localStorage.setItem(\"localStore\", JSON.stringify(this.state));\n    };\n\n    addItem = () => {\n        this.setState({\n            items: [\n                {\n                    id: new Date().getTime(),\n                    title: this.inputRef.current.value.trim() || new Date().toLocaleTimeString(),\n                    hours: \"0\",\n                    minutes: \"0\",\n                    seconds: \"0\",\n                    milliseconds: \"0\",\n                    pause: false,\n                    pauseTime: 0,\n                    startTime: new Date().getTime(),\n                    currentTime: null,\n                },\n                ...this.state.items,\n            ],\n        });\n        this.inputRef.current.value = \"\";\n        this.setLocalStorage();\n    };\n\n    handlerDelete = id => {\n        const { items } = this.state;\n\n        this.setState({\n            items: items.filter(item => id !== item.id),\n        });\n    };\n\n    handlerPause = id => {\n        const { items } = this.state;\n\n        this.setState({\n            items: items.map(item => {\n                if (item.id === id) {\n                    return { ...item, pause: !item.pause };\n                }\n                return item;\n            }),\n        });\n    };\n\n    setPauseTime = () => {\n        const { items } = this.state;\n\n        this.setState({\n            items: items.map(item => {\n                if (item.pause) {\n                    return { ...item, pauseTime: item.pauseTime + 1 };\n                }\n                return item;\n            }),\n        });\n    };\n\n    tick = () => {\n        const { items } = this.state;\n        items.length > 0 &&\n            this.setState({\n                items: items.map(item => {\n                    return {\n                        ...item,\n                        ...tracker(item.startTime, item.currentTime, item.pauseTime),\n                        currentTime: new Date().getTime(),\n                    };\n                }),\n            });\n    };\n\n    handlerSubmit = e => {\n        e.preventDefault();\n        this.addItem();\n    };\n\n    render() {\n        const { items } = this.state;\n        return (\n            <>\n                <div className=\"tracker\">\n                    <a href=\"/\" className=\"tracker__link\">\n                        tracker\n                    </a>\n                    <div className=\"tracker__content\">\n                        <Form handlerSubmit={this.handlerSubmit} inputRef={this.inputRef} />\n                        <List items={items} handlerPause={this.handlerPause} handlerDelete={this.handlerDelete} />\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./style.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}